<?php

declare(strict_types=1);

namespace App\Tests\Controller\ArgumentResolver;

use App\Controller\ArgumentResolver\UserDtoArgumentValueResolver;
use App\Controller\Dto\UserDto;
use App\Entity\User;
use phpDocumentor\Reflection\DocBlock\Tags\Var_;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadata;

class UserDtoArgumentValueResolverTest extends TestCase
{
    private UserDtoArgumentValueResolver $userDtoArgumentValueResolver;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userDtoArgumentValueResolver = new UserDtoArgumentValueResolver();
    }

    public function testUserDtoArgumentValueResolver(): void
    {
        $request = Request::create('/test');
        $argumentMetaData = new ArgumentMetadata('test', UserDto::class, true, true, true, false);
        $result = $this->userDtoArgumentValueResolver->supports($request, $argumentMetaData);

        self::assertNotFalse($result);
        //$this->assertTrue();
    }

    public function testResolveArgument()
    {
        $request = Request::create(
            '/test',
            'GET',
            [],
            [],
            [],
            [],
            json_encode(['firstName' => 'Fabien'])
        );

        $argumentMetadata = new ArgumentMetadata('test', UserDto::class, true, true, false);
        foreach ($this->userDtoArgumentValueResolver->resolve($request, $argumentMetadata) as $result) {
            $dto = $result;
        }
        //$result = $this->userDtoArgumentValueResolver->resolve($request, $argumentMetadata);

        $userDto = new UserDto();
        $userDto->firstName = 'Fabien';
        $userDto->cnp = '';
        $userDto->confirmedPassword = '';
        $userDto->lastName = 'Fabien';
        $userDto->roles = [];
        $userDto->email = '';
        $userDto->password = '';

        var_dump($dto);

        var_dump($result);

        self::assertIsIterable($result);
        var_dump($userDto->firstName);
        var_dump('SUNT AICI');
        var_dump(iterator_to_array($result));
        self::assertEquals($userDto, $dto);
        //self::assertContains($userDto, $result);

    }


}
